
 一直很常用原生的js，总想找个时间好好看看jquery，加快开发效率，但是总是没时间，也可以说是自己懒吧，昨天刚好遇到一个有关jquery事件的问题，今天就来系统的学习一下它所有的事件以及事件绑定。
 
### bind( ) :
这个函数主要是为一个特定元素添加事件处理程序，而且选中元素必须已经存在。在js中我们也会常常原生的去实现绑定，但是一般一个元素只能绑定一个事件，要是继续绑定，那么就会导致后面的函数覆盖前面的，也就是说那个指向事件处理程序的指针指向了最后一个；但是用了bind，就不会如此，它刚好解决了这个问题，多用于一个元素上绑定多个事件。它有三个参数：
- eventType：即事件类型，多个事件用空格分开；若字符串包含`.`字符，那么该事件是带命名空间的
        
        //click是事件类型，name是命名空间；命名空间允许我们解除或者绑定一些事件，而不会影响其他事件
        .bind('click.name', handler)

- [.eventData]：映射参数键值对，主要用于给处理函数传递额外的信息，一般用于解决闭包造成的问题

        var message = 'wj!';
		$('.btn').bind('click', function() {
		   console.log(message);
		});
		message = 'Not in the face!';
		$('.login').bind('click', function() {
		  console.log(message);
		});
        //运行结果：
        //Not in the face!
        //Not in the face!
        
        //在两个闭包中，都引用了message，之所以都显示Not in the face!，是因为message的值已经改变了，为了避免这个问题，我们需要使用eventData来传递信息
        var message = 'WJ';
		$('.btn').bind('click', {msg: message}, function(event) {
		  console.log(event.data.msg);
		});
		message = 'Not in the face!';
		$('.login').bind('click', {msg: message}, function(event) {
		  console.log(event.data.msg);
		});  
		
- handler：事件触发时所执行的函数
        
        //基本用法
		$('.tip').bind('click', function() {
		  console.log('error!');
		});
		//多事件
		$('.btn').bind('click mouseover',function(){
           $(this).toggleClass("act")
        });
        //通过键值对来绑定多个函数
		$('.act').bind({
		  "click": function() {
		    // do something on click
		  },
		  "mouseenter": function() {
		    // do something on mouseenter
		  }
		});
		//特殊注意
		//可以通过传递false代替一个事件处理程序，这将相当于一个事件处理程序绑定写成：
		function(){ return false;}
		//在以后的使用中，可以通过调用.undind(eventName, false)来移除这个函数
		
	> 注意1：在一个事件处理函数中，返回false等效于调用事件对象中的.preventDefault()和.stopPropagation()
	> 注意2：bind无法绑定到还没添加到页面中的元素上
	

 
### click( ) ：
这个函数是为js的`“click”`事件绑定一个处理器，也就是说去监听这个事件，并触发相应的处理函数。但是很需要注意的是，它有两个参数：
- eventData：是一个对象，它包含的数据键值对映射将被传递给事件处理程序
- handler：表示每次触发时所要执行的处理函数
我自己用jquery用的少，所以对于这个函数的第一个参数并不是很了解，昨天遇到一个问题，找了半天，都没有发现错误，还是在宿舍和妹子讨论后才发现自己的错误，当时真是的一脸泪啊。。。。。。。。。。。。。
	               
	    $(function(){
	        //自己诡异的实现
			var addAct = function(target){
			   target = $(".box");
			   target.addClass("act");
			}
			$(".box").bind({
				"click":addAct(this)
			 });
	       
	       //甩我一脸的正确实现
	       var a = function(event){
	            var target = $(event.data.p);
	           target.addClass("act");
	        }
	       $(".box").click({p:".box"},a);
	
	    });
	看上面自己诡异的实现，页面运行时，addAct函数就自动执行了，自己定睛一看，天啊，我在bind里面已经给函数名加了括号，那就是函数已经执行了，我还自以为是的想着，我明明只是传了个参数呀。。。。。。。。于是，问题就来了，那我这个参数到底要怎么传递呢？请看甩我一脸的正确实现，这也就验证着`click()`的eventData的确是一个对象，所以我们要利用键值对，而且还要利用event.Data去传递参数，也就是说所有传递的参数是保存在event.Data里面的，要使用就要学会引用。

### delegate()：
为所有匹配选择器的元素绑定一个或多个处理函数，基于一个指定的根元素的子集，匹配的元素也包括那些新添加到页面的元素上；它有四个参数：
- selector: 选择器字符串，用于过滤触发事件的元素
- eventType：事件类型，可用空格隔开多个事件
- eventData：一个对象，包含的数据键值对映射将被传递给事件处理程序
- handler：每当事件触发时执行的函数

		//基本用法，刚刚新生成的p，也会具备这个事件
		$(".box").delegate('p','click',function(){
		        $( this ).after( "<p>Another paragraph!</p>" );
	    });
> 注意3：要移除`delegate()`绑定的事件，需使用`undelegate( )`
> 注意4：`delegate()`始终传播给其中包含的被委托元素；
> 注意4：在任何DOM树中，比这些元素低的元素上绑定形同事件，在`delegate()`被调用时，也会被触发，因此要在事件中阻止委托时间被触发，利用`event.stopPropagation( )`或者直接返回`false`防止委托处理程序冒泡

### live():
表示附加一个事件处理程序到匹配目前选择器的所有元素；有三个参数（事件类型，数据对象，事件处理函数），但是从`jQuery1.7`开始，这个方法已经过时了，一般都是使用`.on( )`或者`.delegate()`来取代

	$("a.offsite").live("click", function(){ alert("Goodbye!"); }); 
> 注意5：在调用`.live（）`之前，`jquery`会先获取与指定选择器匹配的元素，对于大型文档就会比较花费时间
> 注意6：不支持链式写法
> 注意7：`.live（）`事件是被添加到`document`上的，所以在事件处理之前，会通过最慢最长的路径才会被触发
> 注意8：`$(document).unbind("click")` 会移除所有通过 .live() 添加的 `click` 事件!

### on():
表示给选定元素上绑定一个或多个事件处理函数，有四个参数：

- events：一个或多个空格分隔的事件类型和可选的命名空间，或者仅仅是命名空间
- selector：过滤被选中元素的后代元素
- data：事件被触发时，要传递给事件处理函数的event.data
- handler：事件被触发时执行的函数
-
